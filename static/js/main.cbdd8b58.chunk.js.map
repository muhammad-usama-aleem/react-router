{"version":3,"sources":["component/In.jsx","component/Up.jsx","App.jsx","serviceWorker.js","index.js"],"names":["In","className","type","name","value","to","Up","App","exact","path","component","num","life","g","color","cull","level","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPA6BeA,G,MAzBJ,WACT,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,qBACb,8BACE,uCACA,yBAAKA,UAAU,SACb,0BAAMA,UAAU,YAAhB,aACA,2BAAOC,KAAK,OAAOC,KAAK,aACxB,0BAAMF,UAAU,YAAhB,aACA,2BAAOC,KAAK,WAAWC,KAAK,aAC5B,2BAAOD,KAAK,SAASE,MAAM,UAAUH,UAAU,eAC/C,uBAAGA,UAAU,yBAAb,MACA,uBAAGA,UAAU,mBAAb,0BACyB,kBAAC,IAAD,CAAMI,GAAG,OAAT,mBCcxBC,EA7BJ,WACT,OACE,yBAAKL,UAAU,qBACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,kBACb,8BACE,uCACA,yBAAKA,UAAU,SACb,0BAAMA,UAAU,YAAhB,cACA,2BAAOC,KAAK,OAAOC,KAAK,aACxB,0BAAMF,UAAU,YAAhB,aACA,2BAAOC,KAAK,OAAOC,KAAK,aACxB,0BAAMF,UAAU,YAAhB,UACA,2BAAOC,KAAK,OAAOC,KAAK,aACxB,0BAAMF,UAAU,YAAhB,aACA,2BAAOC,KAAK,WAAWC,KAAK,aAC5B,2BAAOD,KAAK,SAASE,MAAM,UAAUH,UAAU,eAC/C,uBAAGA,UAAU,yBAAb,MACA,uBAAGA,UAAU,mBAAb,4BAC2B,kBAAC,IAAD,CAAMI,GAAG,KAAT,kBCE1BE,MAnBf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOS,KAAK,MAAMC,UAAWJ,KAE/B,kBAAC,IAAD,CACEK,IAAK,EACLC,KAAM,EACNC,EAAG,EACHC,MAAM,UACNC,KAAK,iCACLC,MAAO,MCPKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cbdd8b58.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../component/In.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst In = () => {\r\n  return (\r\n    <div className=\"flex-container\">\r\n      <div className=\"content-container\">\r\n        <div className=\"form-container in\">\r\n          <form>\r\n            <h1>Sign IN</h1>\r\n            <div className=\"align\">\r\n              <span className=\"subtitle\">USERNAME:</span>\r\n              <input type=\"text\" name=\"username\" />\r\n              <span className=\"subtitle\">PASSWORD:</span>\r\n              <input type=\"password\" name=\"password\" />\r\n              <input type=\"submit\" value=\"SIGN IN\" className=\"submit-btn\" />\r\n              <p className=\"center subtitle fancy\">OR</p>\r\n              <p className=\"center subtitle\">\r\n                Haven't joined us yet, <Link to=\"/up\">SIGN UP</Link>\r\n              </p>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default In;\r\n","import React from \"react\";\r\nimport \"../component/In.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Up = () => {\r\n  return (\r\n    <div className=\"flex-container up\">\r\n      <div className=\"content-container\">\r\n        <div className=\"form-container\">\r\n          <form>\r\n            <h1>Sign Up</h1>\r\n            <div className=\"align\">\r\n              <span className=\"subtitle\">FULL NAME:</span>\r\n              <input type=\"text\" name=\"username\" />\r\n              <span className=\"subtitle\">USERNAME:</span>\r\n              <input type=\"text\" name=\"username\" />\r\n              <span className=\"subtitle\">EMAIL:</span>\r\n              <input type=\"text\" name=\"username\" />\r\n              <span className=\"subtitle\">PASSWORD:</span>\r\n              <input type=\"password\" name=\"password\" />\r\n              <input type=\"submit\" value=\"SIGN UP\" className=\"submit-btn\" />\r\n              <p className=\"center subtitle fancy\">OR</p>\r\n              <p className=\"center subtitle\">\r\n                Already have an account, <Link to=\"/\">SIGN IN</Link>\r\n              </p>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Up;\r\n","import React from \"react\";\nimport MouseParticles from \"react-mouse-particles\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport In from \"./component/In.jsx\";\nimport Up from \"./component/Up.jsx\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div>\n        <Route exact path=\"/\" component={In}></Route>\n        <Route path=\"/up\" component={Up}></Route>\n      </div>\n      <MouseParticles\n        num={6}\n        life={1}\n        g={1}\n        color=\"#38d39f\"\n        cull=\"MuiSvgIcon-root,MuiButton-root\"\n        level={6}\n      />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}